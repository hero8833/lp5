2-Bubble sort
#include<iostream>
#include<stdlib.h>
#include<omp.h>
using namespace std;
void bubble(int *, int);
void swap(int &, int &);
void bubble(int *a, int n)
{
 for( int i = 0; i < n; i++ )
 {
 int first = i % 2;
 #pragma omp parallel for shared(a,first)
 for( int j = first; j < n-1; j += 2 )
 {
 if( a[ j ] > a[ j+1 ] )
 {
 swap( a[ j ], a[ j+1 ] );
 }
 }
 }
}
void swap(int &a, int &b)
{
 int test;
 test=a;
 a=b;
 b=test;
}
int main()
{
int *a,n;
cout<<"\n enter total no of elements=>";
cin>>n;
a=new int[n];
cout<<"\n enter elements=>";
for(int i=0;i<n;i++)
{
cin>>a[i];
}
bubble(a,n);
cout<<"\n sorted array is=>";
for(int i=0;i<n;i++)
{
cout<<a[i]<<endl;
}
return 0;
}

Output-
4
35
88
56
24



2-Merge Sort
#include<stdio.h>
#include<omp.h>
void merge(int array[],int low,int mid,int high)
{
int temp[30];
int i,j,k,m;
j=low;
m=mid+1;
for(i=low; j<=mid && m<=high ; i++)
{
if(array[j]<=array[m])
{
temp[i]=array[j];
j++;
}
else
{
temp[i]=array[m];
m++;
}
}
if(j>mid)
{
for(k=m; k<=high; k++)
{
temp[i]=array[k];
i++;
}
}
else
{
for(k=j; k<=mid; k++)
{
temp[i]=array[k];
i++;
}
}
for(k=low; k<=high; k++)
array[k]=temp[k];
}
void mergesort(int array[],int low,int high)
{
int mid;
if(low<high)
{
mid=(low+high)/2;
#pragma omp parallel sections num_threads(2)
{
#pragma omp section
{
mergesort(array,low,mid);
}
#pragma omp section
{
mergesort(array,mid+1,high);
}
}
merge(array,low,mid,high);
}
}
int main()
{
int array[50];
int i,size;
printf("Enter total no. of elements:\n");
scanf("%d",&size);
printf("Enter %d elements:\n",size);
for(i=0; i<size; i++)
{
scanf("%d",&array[i]);
}
mergesort(array,0,size-1);
printf("Sorted Elements as follows:\n");
for(i=0; i<size; i++)
printf("%d ",array[i]);
printf("\n");
return 0;
}

Output-
5
45
67
12
1
89